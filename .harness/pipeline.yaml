pipeline:
  name: sam-pipeline
  identifier: sampipeline
  projectIdentifier: samproject
  orgIdentifier: default
  tags: {}
  stages:
    - stage:
        name: build-setup
        identifier: buildsetup
        description: ""
        type: CI
        spec:
          cloneCodebase: true
          caching:
            enabled: true
            override: true
          buildIntelligence:
            enabled: true
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Cloud
            spec: {}
          execution:
            steps:
              - step:
                  type: Run
                  name: Run Node setup
                  identifier: Run_Node_setup
                  spec:
                    connectorRef: account.harnessImage
                    image: node:20
                    shell: Bash
                    command: |-
                      node -v
                      npm --version
                      apt-get update && apt-get install -y zip
                      if [ -f src/handlers/package-lock.json ]; then
                        npm ci --prefix src/handlers
                      else
                        npm i --prefix src/handlers
                      fi

                      ( cd src/handlers && zip -r ../../build.zip . \
                          -x '*/__tests__/*' '*.test.*' '*/test/*' '*/__snapshots__/*' )
                      ls -lh build.zip
              - step:
                  type: S3Upload
                  name: S3Upload_1
                  identifier: S3Upload_1
                  spec:
                    connectorRef: awsconnector
                    region: us-east-1
                    bucket: bucket-sam-teste
                    sourcePath: build.zip
                    target: app-node-pipe/
    - stage:
        name: lambda-app
        identifier: lambdaapp
        description: ""
        type: Deployment
        spec:
          deploymentType: AwsLambda
          service:
            serviceRef: lambdateste
          environment:
            environmentRef: homolog
            deployToAll: false
            infrastructureDefinitions:
              - identifier: infralambda
          execution:
            steps:
              - step:
                  type: AwsLambdaDeploy
                  name: Deploy Lambda
                  identifier: Deploy_Lambda
                  spec: {}
                  timeout: 10m
                  failureStrategies:
                    - onFailure:
                        errors:
                          - AllErrors
                        action:
                          type: Ignore
                  strategy:
                    parallelism: 1
            rollbackSteps: []
        tags: {}
        failureStrategies:
          - onFailure:
              errors:
                - AllErrors
              action:
                type: Ignore
  properties:
    ci:
      codebase:
        connectorRef: account.Github
        repoName: pad-directory-delete-data-main
        build: <+input>
